spec
sen
load('ADxx.Rdata')
set_1 <- ADxx[ADxx$avisitn==1,]
set.seed(1234)
ss <- sample(unique(set_1$ID),20)
test <- set_1[set_1$ID %in% ss,]
train <- set_1[!(set_1$ID %in% ss),]
#*************
# Apply model
#*************
fit_1 <- glmer(event~aval + (1|ID), family=binomial(link = "logit"),nAGQ=30,data=train)
predictions <- predict(fit_1,newdata=train, type="response", allow.new.levels=T)
pred_results <- ADxx[,c("ID","time","aval","avisitn","event")]
pred_results$pred <- round(predictions,3)
pred_results <- arrange(pred_results,pred)
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 1:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 20:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 40:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
for(i in 45:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
sen
spec
acc
plot(1-spec,sen)
plot(pred_results$aval,acc)
pred_results$spec <- spec
pred_results $sen <- sen
pred_results$sen <- sen
pred_results$acc <- acc
View(pred_results)
plot(pred_results$spec,pred_results$aval)
View(pred_results)
set_1 <- ADxx[ADxx$avisitn==1,]
set.seed(1234)
ss <- sample(unique(set_1$ID),20)
test <- set_1[set_1$ID %in% ss,]
train <- set_1[!(set_1$ID %in% ss),]
#*************
# Apply model
#*************
fit_1 <- glmer(event~aval + (1|ID), family=binomial(link = "logit"),nAGQ=30,data=train)
predictions <- predict(fit_1,newdata=train, type="response", allow.new.levels=T)
pred_results <- ADxx[,c("ID","time","ROIc","aval","avisitn","event")]
pred_results$pred <- round(predictions,3)
#***********
# Order the probabilities
#***********
pred_results <- arrange(pred_results,pred)
#***********
# Calclate Sen / Spec / ACC
#***********
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 45:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
View(pred_results)
pred_results$spec <- spec
pred_results$sen <- sen
pred_results$acc <- acc
View(pred_results)
load('ADxx.Rdata')
set_1 <- ADxx[ADxx$avisitn==1,]
set.seed(1234)
ss <- sample(unique(set_1$ID),20)
test <- set_1[set_1$ID %in% ss,]
train <- set_1[!(set_1$ID %in% ss),]
#***********
pred_results <- arrange(ADxx[,c("ID","ROI","time","aval","event")],aval)
View(pred_results)
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 1:nrow(pred_results)){
tevent <- ifelse(pred_results$aval >= pred_results$aval[i],0,1)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 20:nrow(pred_results)){
tevent <- ifelse(pred_results$aval >= pred_results$aval[i],0,1)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
pred_results$spec <- spec
pred_results$sen <- sen
pred_results$acc <- acc
pred_results <- arrange(test[,c("ID","ROI","time","aval","event")],aval)
pred_results <- arrange(set_1[,c("ID","ROI","time","aval","event")],aval)
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 20:nrow(pred_results)){
tevent <- ifelse(pred_results$aval >= pred_results$aval[i],0,1)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
pred_results$spec <- spec
pred_results$sen <- sen
pred_results$acc <- acc
View(pred_results)
plot(aval,spec)
plot(pred_results$aval,pred_results$spec)
pred_results <- arrange(set_1[,c("ID","ROI","time","aval","event")],aval)
#***********
# Calclate Sen / Spec / ACC
#***********
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 1:nrow(pred_results)){
tevent <- ifelse(pred_results$aval >= pred_results$aval[i],0,1)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
tabs
install.packages("proc")
install.packages("pROC")
library(pROC)
roc(set_1$event,set_1$aval)
roc_1 <- roc(set_1$event,set_1$aval)
plot(roc_1)
roc_1
roc_1$thresholds
cbind(roc_1$thresholds,roc_1$sensitivities,roc_1$specificities)
set_2 <- ADxx[ADxx$avisitn==2,]
roc_2 <- roc(set_2$event,set_2$aval)
plot(roc_2)
cbind(roc_2$thresholds,roc_2$sensitivities,roc_2$specificities)
roc_1
roc_2
dat <- list()
for(i in 1:8){
dat[[i]] <- ADxx[ADxx$avistn==i,]
}
roc_1 <- roc(dat[[1]]$event,dat[[1]]$aval)
dat <- list()
for(i in 1:8){
dat[[i]] <- ADxx[ADxx$avisitn==i,]
}
roc_1 <- roc(dat[[1]]$event,dat[[1]]$aval)
roc_1 <- roc(dat[[1]]$event,dat[[1]]$aval)
roc_2 <- roc(dat[[2]]$event,dat[[2]]$aval)
roc_3 <- roc(dat[[3]]$event,dat[[3]]$aval)
roc_4 <- roc(dat[[4]]$event,dat[[4]]$aval)
roc_5 <- roc(dat[[5]]$event,dat[[5]]$aval)
roc_6 <- roc(dat[[6]]$event,dat[[6]]$aval)
roc_7 <- roc(dat[[7]]$event,dat[[7]]$aval)
roc_8 <- roc(dat[[8]]$event,dat[[8]]$aval)
roc_1
roc_2
roc_3
roc_4
roc_5
roc_6
roc_7
roc_8
are.paired(roc_1,roc_2)
are.paired(roc_1,roc_8)
roc.test(roc_7,roc_8,paired=TRUE)
roc.test(roc_6,roc_7,paired=TRUE)
ci.auc(roc_1)
ci.auc(roc_2)
ci.auc(roc_3)
ci.auc(roc_4)
ci.auc(roc_7)
ci.auc(roc_8)
ci.auc(roc_6)
roc.test(roc_7,roc_8,paired=TRUE,alternative='less')
roc.test(roc_6,roc_8,paired=TRUE,alternative='less')
roc.test(roc_8,roc_6,paired=TRUE,alternative='less')
plot(roc_1,roc_2)
plot.roc(roc_1,roc_2)
plot.roc(roc_1)
plot.roc(roc_8)
plot.roc(roc_7)
plot.roc(roc_6)
plot.roc(roc_5)
roc.test(roc_8,roc_6,paired=TRUE,alternative='less')
roc.test(roc_6,roc_8,paired=TRUE,alternative='less')
roc.test(roc_5,roc_8,paired=TRUE,alternative='less')
roc.test(roc_8,roc_5,paired=TRUE,alternative='less')
roc.test(roc_8,roc_5,paired=TRUE,alternative='greater')
roc.test(roc_5,roc_8,paired=TRUE,alternative='greater')
roc.test(roc_8,roc_7,paired=TRUE,alternative='less')
roc.test(roc_8,roc_6,paired=TRUE,alternative='less')
roc.test(roc_8,roc_5,paired=TRUE,alternative='less')
roc.test(roc_8,roc_4,paired=TRUE,alternative='less')
roc.test(roc_8,roc_3,paired=TRUE,alternative='less')
roc.test(roc_8,roc_2,paired=TRUE,alternative='less')
roc.test(roc_8,roc_1,paired=TRUE,alternative='less')
plot(roc_8$thresholds,roc_8$specificities)
abline(roc_8$thresholds,roc_8$sensitivities)
plot(roc_8$thresholds,roc_8$sensitivities)
lines(roc_8$thresholds,roc_8$specificities)
plot(roc_8$thresholds,roc_8$sensitivities,type="l",col="red")
lines(roc_8$thresholds,roc_8$specificities,col="green")
plot(roc_6$thresholds,roc_6$sensitivities,type="l",col="red")
lines(roc_6$thresholds,roc_6$specificities,col="green")
roc.test(roc_6,roc_7,paired=TRUE,alternative='less')
roc.test(roc_6,roc_5,paired=TRUE,alternative='less')
roc.test(roc_6,roc_4,paired=TRUE,alternative='less')
roc.test(roc_6,roc_3,paired=TRUE,alternative='less')
roc.test(roc_6,roc_2,paired=TRUE,alternative='less')
roc.test(roc_6,roc_1,paired=TRUE,alternative='less')
cbind(roc_8$thresholds,roc_8$sensitivities,roc_8$specificities)
roc_8
roc_1 <- roc(dat[[1]]$event,dat[[1]]$aval,direction=">")
roc_1
roc_8 <- roc(dat[[8]]$event,dat[[8]]$aval, direction=">")
plot(roc_8$thresholds,roc_8$sensitivities,type="l",col="red")
lines(roc_8$thresholds,roc_8$specificities,col="green")
roc_8 <- roc(dat[[8]]$event,dat[[8]]$aval, direction="<")
plot(roc_8$thresholds,roc_8$sensitivities,type="l",col="red")
lines(roc_8$thresholds,roc_8$specificities,col="green")
cbind(roc_8$thresholds,roc_8$sensitivities,roc_8$specificities)
roc_8 <- roc(dat[[8]]$event,dat[[8]]$aval, direction=">")
plot(roc_8$thresholds,roc_8$sensitivities,type="l",col="red")
lines(roc_8$thresholds,roc_8$specificities,col="green")
cbind(roc_8$thresholds,roc_8$sensitivities,roc_8$specificities)
roc_8
table(dat[[5]]$aval >= 102.230)
table(dat[[5]]$aval >= 102.230,dat[[5]]$event)
table(dat[[5]]$event,dat[[5]]$aval >= 102.230)
cbind(roc_8$thresholds,roc_8$sensitivities,roc_8$specificities)
table(dat[[5]]$event,dat[[5]]$aval < 102.230)
table(dat[[5]]$event,dat[[5]]$aval < 48.585)
table(dat[[5]]$event,dat[[5]]$aval < 3.725)
table(dat[[5]]$event,dat[[5]]$aval < 26.495)
13/17
13/26
56/(56+13)
13/17
table(dat[[5]]$event,dat[[5]]$aval <= 26.495)
table(dat[[5]]$event,dat[[5]]$aval <= 7.715)
1/17
table(dat[[5]]$event,dat[[5]]$aval > 7.715)
16/17
setwd("~/GitHub/Code-Examples/R Examples/Will a crime be solved")
require(tidyr)
require(dplyr)
require(ggplot2)
require(rpart)
require(rpart.plot)
require(RColorBrewer)
require(rattle)
require(descr)
install.packages("rpart")
install.packages("rpart")
install.packages("ggplot2")
install.packages("rpart.plot")
require(tidyr)
require(dplyr)
require(ggplot2)
require(rpart)
require(rpart.plot)
require(RColorBrewer)
require(rattle)
require(descr)
remove.packages("ggplot2", lib="~/R/win-library/3.2")
install.packages("ggplot2")
install.packages("ggplot2")
require(ggplot2)
install.packages("rpart.plot")
require(tidyr)
require(dplyr)
require(ggplot2)
require(rpart)
require(rpart.plot)
require(RColorBrewer)
require(rattle)
require(descr)
install.packages("dplyr")
install.packages("dplyr")
require(tidyr)
require(dplyr)
require(ggplot2)
require(rpart)
require(rpart.plot)
require(RColorBrewer)
require(rattle)
require(descr)
homicide <- read.csv("homicide reports.csv",header=TRUE)
attach(homicide)
fit1 <- rpart(Crime.Solved ~ Crime.Type + Victim.Race + Weapon + Victim.Count,data=train,
maxdepth=3, cp=-1)
features <- homicide[c("Crime.Solved","Crime.Type","Victim.Race",
"Relationship","Weapon","Victim.Count","Perpetrator.Count",
"Incident","Victim.Sex")]
unsolved <- filter(features,Crime.Solved=="No")
solved <- filter(features,Crime.Solved=="Yes")
set.seed(1234)
s.id <- sample(sq_len(nrow(solved)),size=.75*nrow(features))
s.id <- sample(seq_len(nrow(solved)),size=.75*nrow(features))
s.id <- sample(seq_len(nrow(solved)),size=.75*nrow(solved))
u.id <- sample(seq_len(nrow(unsolved)),size=.75*nrow(unsolved))
s.train <- solved[s.id,]
s.test <- solved[-s.id,]
u.train <- unsolved[u.id,]
u.test <- unsolved[-u.id,]
train <- rbind(s.train,u.train)
test <- rbind(s.test,u.test)
features <- homicide[c("Crime.Solved","Crime.Type","Victim.Race",
"Relationship","Weapon","Victim.Count","Perpetrator.Count",
"Incident","Victim.Sex")]
features <- features[complete.cases(features),]
unsolved <- filter(features,Crime.Solved=="No")
solved <- filter(features,Crime.Solved=="Yes")
set.seed(1234)
s.id <- sample(seq_len(nrow(solved)),size=.75*nrow(solved))
u.id <- sample(seq_len(nrow(unsolved)),size=.75*nrow(unsolved))
s.train <- solved[s.id,]
s.test <- solved[-s.id,]
u.train <- unsolved[u.id,]
u.test <- unsolved[-u.id,]
train <- rbind(s.train,u.train)
test <- rbind(s.test,u.test)
table(train$Crime.Solved)
solved <- solved[sample(seq_len(nrow(unsolved)),size=nrow(unsolved))]
solved <- solved[sample(seq_len(nrow(unsolved)),size=nrow(unsolved)),]
features <- homicide[c("Crime.Solved","Crime.Type","Victim.Race",
"Relationship","Weapon","Victim.Count","Perpetrator.Count",
"Incident","Victim.Sex")]
features <- features[complete.cases(features),]
unsolved <- filter(features,Crime.Solved=="No")
solved <- filter(features,Crime.Solved=="Yes")
solved <- solved[sample(seq_len(nrow(unsolved)),size=nrow(unsolved)),]
homicide <- read.csv("homicide reports.csv",header=TRUE)
attach(homicide)
features <- homicide[c("Crime.Solved","Crime.Type","Victim.Race",
"Relationship","Weapon","Victim.Count","Perpetrator.Count",
"Incident","Victim.Sex")]
features <- features[complete.cases(features),]
unsolved <- filter(features,Crime.Solved=="No")
solved <- filter(features,Crime.Solved=="Yes")
solved <- solved[sample(seq_len(nrow(unsolved)),size=nrow(unsolved)),]
set.seed(1234)
s.id <- sample(seq_len(nrow(solved)),size=.75*nrow(solved))
u.id <- sample(seq_len(nrow(unsolved)),size=.75*nrow(unsolved))
s.train <- solved[s.id,]
s.test <- solved[-s.id,]
u.train <- unsolved[u.id,]
u.test <- unsolved[-u.id,]
train <- rbind(s.train,u.train)
test <- rbind(s.test,u.test)
table(train$Crime.Solved)
table(test$Crime.Solved)
fit1 <- rpart(Crime.Solved ~ Crime.Type + Victim.Race + Weapon + Victim.Count,data=train,
maxdepth=3, cp=-1)
summary(fit1)
rpart.plot(fit1)
fit1 <- rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train,
maxdepth=6, cp=-1)
summary(fit1)
rpart.plot(fit1)
fit2 <- rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train,
maxdepth=5, cp=-1)
fit3 <- rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train,
maxdepth=4, cp=-1)
fit4 <- rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train,
maxdepth=3, cp=-1)
rpart.plot(fit3)
rpart.plot(fit4)
fit5 <- rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train,
maxdepth=2, cp=-1)
rpart.plot(fit5)
pred.fit1 <- predict(fit1,train,type="class")
pred.fit2 <- predict(fit2,train,type="class")
pred.fit3 <- predict(fit3,train,type="class")
pred.fit4 <- predict(fit4,train,type="class")
pred.fit5 <- predict(fit5,train,type="class")
output <- cbind(train[,c("Crime.Type","Victim.Race","Relationship",
"Weapon","Victim.Count","Crime.Solved")],pred.fit1,pred.fit2,
pred.fit3,pred.fit4,pred.fit5)
CrossTable(output$pred.fit1,output$Crime.Solved,format=c("SAS"),cell.layout=FALSE)
acc <- function(x,y){
p <- table(x,y)
acc <- (p[1,1]+p[2,2])/sum(p)
}
acc(output$pred.fit1,output$Crime.Solved)
acc <- function(x,y){
p <- table(x,y)
acc <- (p[1,1]+p[2,2])/sum(p)
return(acc)
}
acc(output$pred.fit1,output$Crime.Solved)
acc(output$pred.fit2,output$Crime.Solved)
acc(output$pred.fit3,output$Crime.Solved)
acc(output$pred.fit4,output$Crime.Solved)
acc(output$pred.fit5,output$Crime.Solved)
fit6 <- rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train,
maxdepth=1, cp=-1)
rpart.plot(fit6)
acc(output$pred.fit6,output$Crime.Solved)
pred.fit1 <- predict(fit1,train,type="class")
pred.fit2 <- predict(fit2,train,type="class")
pred.fit3 <- predict(fit3,train,type="class")
pred.fit4 <- predict(fit4,train,type="class")
pred.fit5 <- predict(fit5,train,type="class")
output <- cbind(train[,c("Crime.Type","Victim.Race","Relationship",
"Weapon","Victim.Count","Crime.Solved")],pred.fit1,pred.fit2,
pred.fit3,pred.fit4,pred.fit5,pred.fit6)
pred.fit6 <- predict(fit6,train,type="class")
output <- cbind(train[,c("Crime.Type","Victim.Race","Relationship",
"Weapon","Victim.Count","Crime.Solved")],pred.fit1,pred.fit2,
pred.fit3,pred.fit4,pred.fit5,pred.fit6)
acc(output$pred.fit6,output$Crime.Solved)
CrossTable(output$pred.fit6,output$Crime.Solved)
CrossTable(output$pred.fit5,output$Crime.Solved)
CrossTable(output$pred.fit6,output$Crime.Solved,cell.layout=FALSE)
CrossTable(output$pred.fit5,output$Crime.Solved,cell.layout=FALSE)
fit7 <0 rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train, cp=.01)
fit7 <- rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train, cp=.01)
summary(fit7)
rpart.plot(fit7)
fit7
fit7 <- rpart(Crime.Solved ~ Crime.Type + Relationship + Victim.Race + Weapon + Victim.Count,data=train,
cp=.001)
summary(fit7)
rpart.plot(fit7)
pred.fit1 <- predict(fit1,test,type="class")
pred.fit2 <- predict(fit2,test,type="class")
pred.fit3 <- predict(fit3,test,type="class")
pred.fit4 <- predict(fit4,test,type="class")
pred.fit5 <- predict(fit5,test,type="class")
pred.fit6 <- predict(fit6,test,type="class")
pred.fit7 <- predict(fit7,test,type="class")
acc(output$pred.fit7,output$Crime.Solved)
output <- cbind(train[,c("Crime.Type","Victim.Race","Relationship",
"Weapon","Victim.Count","Crime.Solved")],pred.fit1,pred.fit2,
pred.fit3,pred.fit4,pred.fit5,pred.fit6,pred.fit7)
output <- cbind(test[,c("Crime.Type","Victim.Race","Relationship",
"Weapon","Victim.Count","Crime.Solved")],pred.fit1,pred.fit2,
pred.fit3,pred.fit4,pred.fit5,pred.fit6,pred.fit7)
acc(output$pred.fit2,output$Crime.Solved)
acc(output$pred.fit3,output$Crime.Solved)
acc(output$pred.fit4,output$Crime.Solved)
acc(output$pred.fit5,output$Crime.Solved)
acc(output$pred.fit6,output$Crime.Solved)
acc(output$pred.fit7,output$Crime.Solved)
pred.fit1 <- predict(fit1,test,type="class")
pred.fit2 <- predict(fit2,test,type="class")
pred.fit3 <- predict(fit3,test,type="class")
pred.fit4 <- predict(fit4,test,type="class")
pred.fit5 <- predict(fit5,test,type="class")
pred.fit6 <- predict(fit6,test,type="class")
pred.fit7 <- predict(fit7,test,type="class")
output <- cbind(test[,c("Crime.Type","Victim.Race","Relationship",
"Weapon","Victim.Count","Crime.Solved")],pred.fit1,pred.fit2,
pred.fit3,pred.fit4,pred.fit5,pred.fit6,pred.fit7)
acc(output$pred.fit1,output$Crime.Solved)
acc(output$pred.fit2,output$Crime.Solved)
acc(output$pred.fit3,output$Crime.Solved)
acc(output$pred.fit4,output$Crime.Solved)
acc(output$pred.fit5,output$Crime.Solved)
acc(output$pred.fit6,output$Crime.Solved)
acc(output$pred.fit7,output$Crime.Solved)
CrossTable(output$pred.fit6,output$Crime.Solved,cell.layout=FALSE)
CrossTable(output$pred.fit7,output$Crime.Solved,cell.layout=FALSE)
rpart.plot(fit6)
fit6
rpart.plot(fit5)
summary(fit6)
CrossTable(output$pred.fit6,output$Crime.Solved,cell.layout=FALSE)
