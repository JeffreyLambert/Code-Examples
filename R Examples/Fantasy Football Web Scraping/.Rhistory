(25523-42459)/(0.674)
y <- rnorm(100000,mean=25523,sd=25127.6)
hist(y)
summary(y)
qexp(.25,rate=25523)
x <- rgamma(1000, 2,2)
hist(x)
x <- rgamma(1000, 2,25523)
hist(x)
x <- rgamma(1000, 4,25523)
hist(x)
summary(x)
x <- rgamma(1000, 4,1/25523)
hist(x)
summary(x)
x <- rgamma(1000, 2,1/25523)
hist(x)
summary(x)
x <- rgamma(1000, 1.5,1/25523)
hist(x)
summary(x)
x <- rgamma(1000, 1.75,1/25523)
hist(x)
summary(x)
x <- rgamma(1000, 1.7,1/25523)
hist(x)
summary(x)
x <- rgamma(100000, 1.7,1/25523)
hist(x)
summary(x)
x <- rgamma(100000, 1.6,1/25523)
hist(x)
summary(x)
x <- rgamma(100000, 1.5,1/25523)
hist(x)
summary(x)
x <- rgamma(100000, 1.5,1/25000)
hist(x)
summary(x)
)
(25523-42459)/(0.674)
library(lme4)
library(plyr)
load('ADxx.Rdata')
set_1 <- ADxx[ADxx$avisitn==1,]
set.seed(1234)
ss <- sample(unique(set_1$ID),20)
test <- set_1[set_1$ID %in% ss,]
train <- set_1[!(set_1$ID %in% ss),]
load('ADxx.Rdata')
View(raw_long)
#****************
# Load Packages
#****************
library(dplyr) #Package for manipulating data frames
library(stringr) #Package for parsing and manipulating character strings
library(reshape2) #Package for transposing data
#*************************
# Read in the Spreadsheets
#*************************
raw_imp <- read.csv("C:/Users/Jeff/Documents/GitHub/Terella-Flap-Perfusion/Data/raw.csv",na.strings=c("","NA"))
raw_outcomes <- read.csv("C:/Users/Jeff/Documents/GitHub/Terella-Flap-Perfusion/Data/necrosis.csv", na.strings=c(""))
raw_imp <- as.matrix(raw_imp) #Convert to matrix to remove oddities associated with import
colnames(raw_imp) <- NULL #Remove all column labels
rownames(raw_imp) <- NULL #Remove all row labels
#***************
# Manipulate row names to create character IDs for use with melt function
#***************
rat_names <- as.vector(raw_imp[1,]) #Create a vector of rad names to be used as subject IDs
rat_names <- str_replace(rat_names," ","") #Remove all white space to create subject IDs
rat_names <- str_to_lower(rat_names) #Change all to lowercase for ease of use
rat_names <- rat_names[-1]
rat_names[1] <- "ROI"
#***************
# Subset matrix
#***************
sub_frame <- raw_imp[,-1] #Remove the first 1st column
sub_frame <- sub_frame[-1,] #Remove the first row
sub_frame <- sub_frame[rowSums(is.na(sub_frame)) != ncol(sub_frame),]
sub_frame <- as.data.frame(sub_frame)
names(sub_frame) <- rat_names
#**************
# Clean ROI variable by extracting the numeric component of ROI
#**************
sub_frame$ROI <- str_extract(sub_frame$ROI,'[0-9]') #Keep only the numeric component of region of interest
#**************
# Add a column for time point
#**************
time_dat <- raw_imp[-1,1]
time_dat <- time_dat[is.na(time_dat)==F]
time_dat <- rep(time_dat,each=4,length=32) #Repeat the time points 4 times to reach the length of the sub_frame data
sub_frame$time <- time_dat #Add timeponts to sub_frame data set
#************************
# Conver the data from wide to long format
#************************
raw_long <- melt(sub_frame,id.vars=c("time","ROI"))
names(raw_long) <- c('time','ROI','ID','aval')
#*************************
# Create baseline Flag and Baseline values
#*************************
base_ROI <- filter(raw_long, ROI==1)
base_ROI <- base_ROI[,c("ID","time","aval")]
names(base_ROI) <- c("ID","time","base_ROI")
base_time <- filter(raw_long,time=='1m')
base_time <- base_time[,c("ID",'ROI',"aval")]
names(base_time) <- c("ID",'ROI',"base_time")
#*************************
# Merge baseline ROI data onto raw_long
#*************************
raw_long <- left_join(raw_long,base_ROI)
raw_long <- left_join(raw_long,base_time)
#*************************
# Convert aval, base_time and base_ROI to numeric
#*************************
raw_long$aval <- sapply(raw_long$aval,as.numeric)
raw_long$base_ROI <- sapply(raw_long$base_ROI,as.numeric)
raw_long$base_time <- sapply(raw_long$base_time,as.numeric)
#*************************
# Create character string of ROI for use in graphics
#*************************
raw_long$ROIc[raw_long$ROI==1] <- 'ROI 1'
raw_long$ROIc[raw_long$ROI==2] <- 'ROI 2'
raw_long$ROIc[raw_long$ROI==3] <- 'ROI 3'
raw_long$ROIc[raw_long$ROI==4] <- 'ROI 4'
#*************************
# Calculate change from baseline ROI
#*************************
raw_long$chg <- raw_long$aval-raw_long$base_ROI
raw_long$pchg <- raw_long$chg/raw_long$base_ROI*100
#*************************
# Calculate change from baseline time
#*************************
raw_long$bchg <- raw_long$aval-raw_long$base_time
raw_long$pbchg <- raw_long$bchg/raw_long$base_time*100
#*************************
# Create treatment variable
#*************************
group1 <- NULL
for(i in 4:15){
group1[i-3] <- paste0('rat',i)
}
raw_long$trtpn <- ifelse(raw_long$ID %in% group1, 0,1)
raw_long$trtp <- ifelse(raw_long$trtpn==0,'Reference','Ischemic Pre-Conditioning')
#*************************
# Create numeric time variable
#*************************
raw_long$avisitn[raw_long$time=='1m'] <- 1
raw_long$avisitn[raw_long$time=='5m'] <- 2
raw_long$avisitn[raw_long$time=='10m'] <- 3
raw_long$avisitn[raw_long$time=='30m'] <- 4
raw_long$avisitn[raw_long$time=='1h'] <- 5
raw_long$avisitn[raw_long$time=='2h'] <- 6
raw_long$avisitn[raw_long$time=='24h'] <- 7
raw_long$avisitn[raw_long$time=='1w'] <- 8
#**************************
# Create times for use with spaghetti plot
#**************************
raw_long$timep[raw_long$time=='1m'] <- 1
raw_long$timep[raw_long$time=='5m'] <- 15
raw_long$timep[raw_long$time=='10m'] <- 30
raw_long$timep[raw_long$time=='30m'] <- 60
raw_long$timep[raw_long$time=='1h'] <- 90
raw_long$timep[raw_long$time=='2h'] <- 120
raw_long$timep[raw_long$time=='24h'] <- 200
raw_long$timep[raw_long$time=='1w'] <- 300
#**************************
# Create continuous time
#**************************
raw_long$timen[raw_long$time=='1m'] <- 1
raw_long$timen[raw_long$time=='5m'] <- 5
raw_long$timen[raw_long$time=='10m'] <- 10
raw_long$timen[raw_long$time=='30m'] <- 30
raw_long$timen[raw_long$time=='1h'] <- 60
raw_long$timen[raw_long$time=='2h'] <- 120
raw_long$timen[raw_long$time=='24h'] <- 1440
raw_long$timen[raw_long$time=='1w'] <- 10080
#*************************
# Manipulate the outcomes dataset
#*************************
names(raw_outcomes) <- c("ID","ROI 1","ROI 2","ROI 3","ROI 4")
out_long <- melt(raw_outcomes,by.var=c("ID"),measure.vars = c("ROI 1","ROI 2","ROI 3","ROI 4")) #Create long form
names(out_long) <- c("ID","ROIc","event") #Rename variables for merging
out_long$ID <- str_replace(out_long$ID," ","") #Remove white space from ID
out_long$ID <- sapply(out_long$ID,as.character) #COnvert ID to character so it can be used to merge
out_long$ID <- str_to_lower(out_long$ID)
out_long$event[out_long$event=='ND(0)'] <- NA #Remove ND(0)
out_long$event <- sapply(out_long$event,as.numeric) #convert to numeric
out_long$ROIc <- sapply(out_long$ROIc, as.character)
raw_long <- left_join(raw_long,out_long)
ADxx <- raw_long
save(ADxx,file='ADxx.Rdata')
load('ADxx.Rdata')
set_1 <- ADxx[ADxx$avisitn==1,]
set.seed(1234)
ss <- sample(unique(set_1$ID),20)
test <- set_1[set_1$ID %in% ss,]
train <- set_1[!(set_1$ID %in% ss),]
fit_1 <- glmer(event~aval + (1|ID), family=binomial(link = "logit"),nAGQ=30,data=train)
predictions <- predict(fit_1,newdata=train, type="response", allow.new.levels=T)
pred_results <- test
pred_results$pred <- round(predictions,3)
View(pred_results)
View(ADxx)
View(ADxx)
pred_results <- ADXX[,c("ID","time","aval","avisitn","event")]
pred_results <- ADxx[,c("ID","time","aval","avisitn","event")]
pred_results$pred <- round(predictions,3)
arrange(pred_results,pred)
pred_results <- arrange(pred_results,pred)
i <- 45
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tevent
tabs <- table(pred_results$event,tevent)
tabs
sum(tabs)
40+560+136
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc <- (tabs[1,1]+tabs[2,2])/sum(tabs)
spec
sen
load('ADxx.Rdata')
set_1 <- ADxx[ADxx$avisitn==1,]
set.seed(1234)
ss <- sample(unique(set_1$ID),20)
test <- set_1[set_1$ID %in% ss,]
train <- set_1[!(set_1$ID %in% ss),]
#*************
# Apply model
#*************
fit_1 <- glmer(event~aval + (1|ID), family=binomial(link = "logit"),nAGQ=30,data=train)
predictions <- predict(fit_1,newdata=train, type="response", allow.new.levels=T)
pred_results <- ADxx[,c("ID","time","aval","avisitn","event")]
pred_results$pred <- round(predictions,3)
pred_results <- arrange(pred_results,pred)
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 1:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 20:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 40:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
for(i in 45:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
sen
spec
acc
plot(1-spec,sen)
plot(pred_results$aval,acc)
pred_results$spec <- spec
pred_results $sen <- sen
pred_results$sen <- sen
pred_results$acc <- acc
View(pred_results)
plot(pred_results$spec,pred_results$aval)
View(pred_results)
set_1 <- ADxx[ADxx$avisitn==1,]
set.seed(1234)
ss <- sample(unique(set_1$ID),20)
test <- set_1[set_1$ID %in% ss,]
train <- set_1[!(set_1$ID %in% ss),]
#*************
# Apply model
#*************
fit_1 <- glmer(event~aval + (1|ID), family=binomial(link = "logit"),nAGQ=30,data=train)
predictions <- predict(fit_1,newdata=train, type="response", allow.new.levels=T)
pred_results <- ADxx[,c("ID","time","ROIc","aval","avisitn","event")]
pred_results$pred <- round(predictions,3)
#***********
# Order the probabilities
#***********
pred_results <- arrange(pred_results,pred)
#***********
# Calclate Sen / Spec / ACC
#***********
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 45:nrow(pred_results)){
tevent <- ifelse(pred_results$pred >= pred_results$pred[i],1,0)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
View(pred_results)
pred_results$spec <- spec
pred_results$sen <- sen
pred_results$acc <- acc
View(pred_results)
load('ADxx.Rdata')
set_1 <- ADxx[ADxx$avisitn==1,]
set.seed(1234)
ss <- sample(unique(set_1$ID),20)
test <- set_1[set_1$ID %in% ss,]
train <- set_1[!(set_1$ID %in% ss),]
#***********
pred_results <- arrange(ADxx[,c("ID","ROI","time","aval","event")],aval)
View(pred_results)
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 1:nrow(pred_results)){
tevent <- ifelse(pred_results$aval >= pred_results$aval[i],0,1)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 20:nrow(pred_results)){
tevent <- ifelse(pred_results$aval >= pred_results$aval[i],0,1)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
pred_results$spec <- spec
pred_results$sen <- sen
pred_results$acc <- acc
pred_results <- arrange(test[,c("ID","ROI","time","aval","event")],aval)
pred_results <- arrange(set_1[,c("ID","ROI","time","aval","event")],aval)
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 20:nrow(pred_results)){
tevent <- ifelse(pred_results$aval >= pred_results$aval[i],0,1)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
pred_results$spec <- spec
pred_results$sen <- sen
pred_results$acc <- acc
View(pred_results)
plot(aval,spec)
plot(pred_results$aval,pred_results$spec)
pred_results <- arrange(set_1[,c("ID","ROI","time","aval","event")],aval)
#***********
# Calclate Sen / Spec / ACC
#***********
spec <- NULL
sen <- NULL
acc <- NULL
for(i in 1:nrow(pred_results)){
tevent <- ifelse(pred_results$aval >= pred_results$aval[i],0,1)
tabs <- table(pred_results$event,tevent)
spec[i] <- tabs[1,1]/(tabs[1,1]+tabs[1,2])
sen[i] <- tabs[2,2]/(tabs[2,2]+tabs[2,1])
acc[i] <- (tabs[1,1]+tabs[2,2])/sum(tabs)
}
tabs
install.packages("proc")
install.packages("pROC")
library(pROC)
roc(set_1$event,set_1$aval)
roc_1 <- roc(set_1$event,set_1$aval)
plot(roc_1)
roc_1
roc_1$thresholds
cbind(roc_1$thresholds,roc_1$sensitivities,roc_1$specificities)
set_2 <- ADxx[ADxx$avisitn==2,]
roc_2 <- roc(set_2$event,set_2$aval)
plot(roc_2)
cbind(roc_2$thresholds,roc_2$sensitivities,roc_2$specificities)
roc_1
roc_2
dat <- list()
for(i in 1:8){
dat[[i]] <- ADxx[ADxx$avistn==i,]
}
roc_1 <- roc(dat[[1]]$event,dat[[1]]$aval)
dat <- list()
for(i in 1:8){
dat[[i]] <- ADxx[ADxx$avisitn==i,]
}
roc_1 <- roc(dat[[1]]$event,dat[[1]]$aval)
roc_1 <- roc(dat[[1]]$event,dat[[1]]$aval)
roc_2 <- roc(dat[[2]]$event,dat[[2]]$aval)
roc_3 <- roc(dat[[3]]$event,dat[[3]]$aval)
roc_4 <- roc(dat[[4]]$event,dat[[4]]$aval)
roc_5 <- roc(dat[[5]]$event,dat[[5]]$aval)
roc_6 <- roc(dat[[6]]$event,dat[[6]]$aval)
roc_7 <- roc(dat[[7]]$event,dat[[7]]$aval)
roc_8 <- roc(dat[[8]]$event,dat[[8]]$aval)
roc_1
roc_2
roc_3
roc_4
roc_5
roc_6
roc_7
roc_8
are.paired(roc_1,roc_2)
are.paired(roc_1,roc_8)
roc.test(roc_7,roc_8,paired=TRUE)
roc.test(roc_6,roc_7,paired=TRUE)
ci.auc(roc_1)
ci.auc(roc_2)
ci.auc(roc_3)
ci.auc(roc_4)
ci.auc(roc_7)
ci.auc(roc_8)
ci.auc(roc_6)
roc.test(roc_7,roc_8,paired=TRUE,alternative='less')
roc.test(roc_6,roc_8,paired=TRUE,alternative='less')
roc.test(roc_8,roc_6,paired=TRUE,alternative='less')
plot(roc_1,roc_2)
plot.roc(roc_1,roc_2)
plot.roc(roc_1)
plot.roc(roc_8)
plot.roc(roc_7)
plot.roc(roc_6)
plot.roc(roc_5)
roc.test(roc_8,roc_6,paired=TRUE,alternative='less')
roc.test(roc_6,roc_8,paired=TRUE,alternative='less')
roc.test(roc_5,roc_8,paired=TRUE,alternative='less')
roc.test(roc_8,roc_5,paired=TRUE,alternative='less')
roc.test(roc_8,roc_5,paired=TRUE,alternative='greater')
roc.test(roc_5,roc_8,paired=TRUE,alternative='greater')
roc.test(roc_8,roc_7,paired=TRUE,alternative='less')
roc.test(roc_8,roc_6,paired=TRUE,alternative='less')
roc.test(roc_8,roc_5,paired=TRUE,alternative='less')
roc.test(roc_8,roc_4,paired=TRUE,alternative='less')
roc.test(roc_8,roc_3,paired=TRUE,alternative='less')
roc.test(roc_8,roc_2,paired=TRUE,alternative='less')
roc.test(roc_8,roc_1,paired=TRUE,alternative='less')
plot(roc_8$thresholds,roc_8$specificities)
abline(roc_8$thresholds,roc_8$sensitivities)
plot(roc_8$thresholds,roc_8$sensitivities)
lines(roc_8$thresholds,roc_8$specificities)
plot(roc_8$thresholds,roc_8$sensitivities,type="l",col="red")
lines(roc_8$thresholds,roc_8$specificities,col="green")
plot(roc_6$thresholds,roc_6$sensitivities,type="l",col="red")
lines(roc_6$thresholds,roc_6$specificities,col="green")
roc.test(roc_6,roc_7,paired=TRUE,alternative='less')
roc.test(roc_6,roc_5,paired=TRUE,alternative='less')
roc.test(roc_6,roc_4,paired=TRUE,alternative='less')
roc.test(roc_6,roc_3,paired=TRUE,alternative='less')
roc.test(roc_6,roc_2,paired=TRUE,alternative='less')
roc.test(roc_6,roc_1,paired=TRUE,alternative='less')
cbind(roc_8$thresholds,roc_8$sensitivities,roc_8$specificities)
roc_8
roc_1 <- roc(dat[[1]]$event,dat[[1]]$aval,direction=">")
roc_1
roc_8 <- roc(dat[[8]]$event,dat[[8]]$aval, direction=">")
plot(roc_8$thresholds,roc_8$sensitivities,type="l",col="red")
lines(roc_8$thresholds,roc_8$specificities,col="green")
roc_8 <- roc(dat[[8]]$event,dat[[8]]$aval, direction="<")
plot(roc_8$thresholds,roc_8$sensitivities,type="l",col="red")
lines(roc_8$thresholds,roc_8$specificities,col="green")
cbind(roc_8$thresholds,roc_8$sensitivities,roc_8$specificities)
roc_8 <- roc(dat[[8]]$event,dat[[8]]$aval, direction=">")
plot(roc_8$thresholds,roc_8$sensitivities,type="l",col="red")
lines(roc_8$thresholds,roc_8$specificities,col="green")
cbind(roc_8$thresholds,roc_8$sensitivities,roc_8$specificities)
roc_8
table(dat[[5]]$aval >= 102.230)
table(dat[[5]]$aval >= 102.230,dat[[5]]$event)
table(dat[[5]]$event,dat[[5]]$aval >= 102.230)
cbind(roc_8$thresholds,roc_8$sensitivities,roc_8$specificities)
table(dat[[5]]$event,dat[[5]]$aval < 102.230)
table(dat[[5]]$event,dat[[5]]$aval < 48.585)
table(dat[[5]]$event,dat[[5]]$aval < 3.725)
table(dat[[5]]$event,dat[[5]]$aval < 26.495)
13/17
13/26
56/(56+13)
13/17
table(dat[[5]]$event,dat[[5]]$aval <= 26.495)
table(dat[[5]]$event,dat[[5]]$aval <= 7.715)
1/17
table(dat[[5]]$event,dat[[5]]$aval > 7.715)
16/17
setwd("~/GitHub/Code-Examples/R Examples/Fantasy Football Web Scraping")
library("sqldf", lib.loc="~/R/win-library/3.2")
db <- dbConnect(SQLite(),dbname="Fantasy Points Database.sqlite")
dbListTables(db)
sqldf("SELECT * FROM QB2016 LIMIT 10",dbname="Fantasy Points Database.sqlite")
